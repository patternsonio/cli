/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'octopus';


declare global {

  namespace StencilComponents {
    interface ComponentDemo {
      'content': string;
      'props': object;
      'tag': string;
    }
  }

  interface HTMLComponentDemoElement extends StencilComponents.ComponentDemo, HTMLStencilElement {}

  var HTMLComponentDemoElement: {
    prototype: HTMLComponentDemoElement;
    new (): HTMLComponentDemoElement;
  };
  interface HTMLElementTagNameMap {
    'component-demo': HTMLComponentDemoElement;
  }
  interface ElementTagNameMap {
    'component-demo': HTMLComponentDemoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'component-demo': JSXElements.ComponentDemoAttributes;
    }
  }
  namespace JSXElements {
    export interface ComponentDemoAttributes extends HTMLAttributes {
      'content'?: string;
      'props'?: object;
      'tag'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PropInput {
      'attr': string;
      'disabled': boolean;
      'id': string;
      'type': string;
    }
  }

  interface HTMLPropInputElement extends StencilComponents.PropInput, HTMLStencilElement {}

  var HTMLPropInputElement: {
    prototype: HTMLPropInputElement;
    new (): HTMLPropInputElement;
  };
  interface HTMLElementTagNameMap {
    'prop-input': HTMLPropInputElement;
  }
  interface ElementTagNameMap {
    'prop-input': HTMLPropInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'prop-input': JSXElements.PropInputAttributes;
    }
  }
  namespace JSXElements {
    export interface PropInputAttributes extends HTMLAttributes {
      'attr'?: string;
      'disabled'?: boolean;
      'id'?: string;
      'onNewValue'?: (event: CustomEvent) => void;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface IndexPage {
      'basetagurl': string;
      'components': string;
      'name': string;
      'version': string;
    }
  }

  interface HTMLIndexPageElement extends StencilComponents.IndexPage, HTMLStencilElement {}

  var HTMLIndexPageElement: {
    prototype: HTMLIndexPageElement;
    new (): HTMLIndexPageElement;
  };
  interface HTMLElementTagNameMap {
    'index-page': HTMLIndexPageElement;
  }
  interface ElementTagNameMap {
    'index-page': HTMLIndexPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'index-page': JSXElements.IndexPageAttributes;
    }
  }
  namespace JSXElements {
    export interface IndexPageAttributes extends HTMLAttributes {
      'basetagurl'?: string;
      'components'?: string;
      'name'?: string;
      'version'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NotFound {
      'components': string;
    }
  }

  interface HTMLNotFoundElement extends StencilComponents.NotFound, HTMLStencilElement {}

  var HTMLNotFoundElement: {
    prototype: HTMLNotFoundElement;
    new (): HTMLNotFoundElement;
  };
  interface HTMLElementTagNameMap {
    'not-found': HTMLNotFoundElement;
  }
  interface ElementTagNameMap {
    'not-found': HTMLNotFoundElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'not-found': JSXElements.NotFoundAttributes;
    }
  }
  namespace JSXElements {
    export interface NotFoundAttributes extends HTMLAttributes {
      'components'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TagPage {
      'backlink': string;
      'component': string;
      'name': string;
      'tag': string;
      'version': string;
    }
  }

  interface HTMLTagPageElement extends StencilComponents.TagPage, HTMLStencilElement {}

  var HTMLTagPageElement: {
    prototype: HTMLTagPageElement;
    new (): HTMLTagPageElement;
  };
  interface HTMLElementTagNameMap {
    'tag-page': HTMLTagPageElement;
  }
  interface ElementTagNameMap {
    'tag-page': HTMLTagPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tag-page': JSXElements.TagPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TagPageAttributes extends HTMLAttributes {
      'backlink'?: string;
      'component'?: string;
      'name'?: string;
      'tag'?: string;
      'version'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
